{
  super.handleMessage(msg);
switch (msg.what) {
case HANDLER_PREPARE:
    try {
      currentVideoWidth=0;
      currentVideoHeight=0;
      mediaPlayer.release();
      mediaPlayer=new IjkMediaPlayer();
      mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
      mediaPlayer.setDataSource(((FuckBean)msg.obj).url,((FuckBean)msg.obj).mapHeadData);
      mediaPlayer.setLooping(((FuckBean)msg.obj).looping);
      mediaPlayer.setOnPreparedListener(JCMediaManager.this);
      mediaPlayer.setOnCompletionListener(JCMediaManager.this);
      mediaPlayer.setOnBufferingUpdateListener(JCMediaManager.this);
      mediaPlayer.setScreenOnWhilePlaying(true);
      mediaPlayer.setOnSeekCompleteListener(JCMediaManager.this);
      mediaPlayer.setOnErrorListener(JCMediaManager.this);
      mediaPlayer.setOnInfoListener(JCMediaManager.this);
      mediaPlayer.setOnVideoSizeChangedListener(JCMediaManager.this);
      mediaPlayer.prepareAsync();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  break;
case HANDLER_SETDISPLAY:
if (msg.obj == null) {
  instance().mediaPlayer.setSurface(null);
}
 else {
  Surface holder=(Surface)msg.obj;
  if (holder.isValid()) {
    Log.i(TAG,"set surface");
    instance().mediaPlayer.setSurface(holder);
    mainThreadHandler.post(new Runnable(){
      @Override public void run(){
        textureView.requestLayout();
      }
    }
);
  }
}
break;
case HANDLER_RELEASE:
mediaPlayer.reset();
mediaPlayer.release();
break;
}
}
